using System;
using System.Data;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using System.Data.SqlClient;

/// <summary>
/// Summary description for ASCSparePurchaseOutside
/// </summary>
public class ASCSparePurchaseOutside
{
    SIMSSqlDataAccessLayer objSql = new SIMSSqlDataAccessLayer();
    string strMsg;

    Int32 _ASC_Id;

    public Int32 ASC_Id
    {
        get { return _ASC_Id; }
        set { _ASC_Id = value; }
    }
    Int32 _ProductDivision_Id;

    public Int32 ProductDivision_Id
    {
        get { return _ProductDivision_Id; }
        set { _ProductDivision_Id = value; }
    }


    String _Spare_Desc;

    public String Spare_Desc
    {
        get { return _Spare_Desc; }
        set { _Spare_Desc = value; }
    }

    Int32 _VendorId;

    public Int32 VendorId
    {
        get { return _VendorId; }
        set { _VendorId = value; }
    }

    Int32 _SpareId;

    public Int32 SpareId
    {
        get { return _SpareId; }
        set { _SpareId = value; }
    }

	public ASCSparePurchaseOutside()
	{
		//
		// TODO: Add constructor logic here
		//
	}
    public string UserName
    { get; set; }
    public string Vendor
    { get; set; }
    public string RegionSno
    { get; set; }
    public string BranchSno
    { get; set; }
    public string PrefixString
    { get; set; }
    public string AutoGeneratedNumber
    { get; set; }
    public int Quantity
    { get; set; }
    public decimal RateSAP
    { get; set; }
    public decimal RatePurchased
    { get; set; }
    public decimal Amount
    { get; set; }
    public string BillNo
    { get; set; }
    public string BillDate
    { get; set; }
    public string Comments
    { get; set; }

    public bool IsApproved
    { get; set; }
    public string RejectionReason
    { get; set; }
    public string BAComments
    { get; set; }

    public string dateFrom
    { get; set; }
    public string dateTo
    { get; set; }


    public int ReturnValue
    { get; set; }
    

    public void BindDDLLocation(DropDownList ddlLocation, int p)
    {
        throw new NotImplementedException();
    }

    public void BindDDLDefLocation(DropDownList ddlDefLocation, int p)
    {
        throw new NotImplementedException();
    }

    public void BindDDLVendorBySpare(Label lblrateSAP)
    {
        DataSet ds = new DataSet();
        SqlParameter[] param = {
                                    new SqlParameter("@Type", "SELECT_ALL_VENDOR_ACCORDINGTO_SPARE"),
                                    new SqlParameter("@ProductDivision", this._ProductDivision_Id),
                                    new SqlParameter("@SpareId", this._SpareId)
                               };

        ds = objSql.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        //if (ds.Tables[0].Rows.Count > 0)
        //{
        //    ddl.DataSource = ds.Tables[0];
        //    ddl.DataValueField = "Vendor_Id";
        //    ddl.DataTextField = "Vendor_Name";
        //    ddl.DataBind();
        //    ddl.Items.Insert(0, new ListItem("Select", "0"));
        //}
        //else
        //{
        //    ddl.Items.Clear();
        //    ddl.Items.Insert(0, new ListItem("Select", "0"));
        //}
        lblrateSAP.Text = Convert.ToString(ds.Tables[1].Rows[0][0]);
    }

    // ok
    public void BindDDLSpareCode(DropDownList ddlSpareCode)
    {
        DataSet ds = new DataSet();
        SqlParameter[] param = {
                                    new SqlParameter("@Type", "SELECT_ALL_SPARECODE_ACCORDINGTO_DIVISION"),
                                    new SqlParameter("@ProductDivision", this._ProductDivision_Id),
                                    new SqlParameter("@Spare_Desc",this._Spare_Desc)
                                };

        ds = objSql.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlSpareCode.DataSource = ds.Tables[0];
            ddlSpareCode.DataValueField = "SPARE_ID";
            ddlSpareCode.DataTextField = "SPARE_DESC";
            ddlSpareCode.DataBind();
            ddlSpareCode.Items.Insert(0, new ListItem("Select", "0"));
        }
        else
        {
            ddlSpareCode.Items.Clear();
            ddlSpareCode.Items.Insert(0, new ListItem("Select", "0"));
        }

        // Tool Tip
        for (int k = 0; k < ddlSpareCode.Items.Count; k++)
        {
            ddlSpareCode.Items[k].Attributes.Add("title", ddlSpareCode.Items[k].Text);
        }
    }

    public string GetAutoGeneratedNumber()
    {
        string AutoGeneratedNumber = string.Empty;
        SqlParameter[] param = {
                                    new SqlParameter("@Type", "GET_AUTOGENERATED_NUMBER"),
                                    new SqlParameter("@PrefixString", this.PrefixString)                                                                                                    
                               };

        AutoGeneratedNumber = Convert.ToString(objSql.ExecuteScalar(CommandType.StoredProcedure, "uspSparePurchaseOutside", param));
        return AutoGeneratedNumber;
    }

    public string SaveData(string strType)
    {
        SqlParameter[] sqlParamI =
        {
            new SqlParameter("@MessageOut",SqlDbType.VarChar,200),
            new SqlParameter("@Return_Value",SqlDbType.Int),
            new SqlParameter("@Type",strType),
            new SqlParameter("@Document_No",this.AutoGeneratedNumber),
            new SqlParameter("@Asc_Code",this.ASC_Id),
            new SqlParameter("@ProductDivision",this.ProductDivision_Id),
           // new SqlParameter("@Vendor_Id",this.VendorId),
            new SqlParameter("@Vendor",this.Vendor),
            new SqlParameter("@SpareId",this.SpareId),
            new SqlParameter("@Quantity",this.Quantity),
            new SqlParameter("@RateSAP",this.RateSAP),
            new SqlParameter("@RatePurchased",this.RatePurchased),
            new SqlParameter("@Amount",this.Amount),
            new SqlParameter("@Bill_No",this.BillNo),
            new SqlParameter("@Bill_Date",this.BillDate),
            new SqlParameter("@Comments",this.Comments),
            new SqlParameter("@EmpCode",Membership.GetUser().UserName.ToString())
   };
        sqlParamI[0].Direction = ParameterDirection.Output;
        sqlParamI[1].Direction = ParameterDirection.ReturnValue;
        objSql.ExecuteNonQuery(CommandType.StoredProcedure, "uspSparePurchaseOutside", sqlParamI);
        if (int.Parse(sqlParamI[1].Value.ToString()) == -1)
        {
            this.ReturnValue = int.Parse(sqlParamI[1].Value.ToString());
        }
        strMsg = sqlParamI[0].Value.ToString();
        sqlParamI = null;
        return strMsg;
    }

    public void GetSCs(DropDownList ddl,int BranchSNo)
    {
        SIMSSqlDataAccessLayer objSIMSSqlDataAccessLayer = new SIMSSqlDataAccessLayer();
        SqlParameter[] param ={
                                new SqlParameter("@Type","GETALLASC"),
                                new SqlParameter("@BranchSno",BranchSNo)
                         
                             };
        DataSet ds = objSIMSSqlDataAccessLayer.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        ddl.DataTextField = "SC_Name";
        ddl.DataValueField = "SC_SNo";
        ddl.DataSource = ds;
        ddl.DataBind();
        for (int k = 0; k < ddl.Items.Count; k++)
        {
            ddl.Items[k].Attributes.Add("title", ddl.Items[k].Text);
        }
        ddl.Items.Insert(0, new ListItem("Select", "0"));
    }

    public void GetAllProductDivision(DropDownList ddl)
    {
        SIMSSqlDataAccessLayer objSIMSSqlDataAccessLayer = new SIMSSqlDataAccessLayer();
        SqlParameter[] param ={
                                new SqlParameter("@Type","GETALLDIVISION")  ,
                                new SqlParameter("@Asc_Code",this.ASC_Id)        
                              };
        DataSet ds = objSIMSSqlDataAccessLayer.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        ddl.DataTextField = "Unit_desc";
        ddl.DataValueField = "Unit_SNo";
        ddl.DataSource = ds;
        ddl.DataBind();
    }

    public void GetBillsForApproval(GridView gdv)
    {
        SIMSSqlDataAccessLayer objSIMSSqlDataAccessLayer = new SIMSSqlDataAccessLayer();
        SqlParameter[] param ={
                                new SqlParameter("@Type","GETBILLS_APPROVAL")  ,
                               new SqlParameter("@RegionSno", this.RegionSno),
                               new SqlParameter("@BranchSno", this.BranchSno),
                                new SqlParameter("@Asc_Code", this.ASC_Id),
                                new SqlParameter("@Document_No", this.AutoGeneratedNumber)
                        
                              };
        DataSet ds = objSIMSSqlDataAccessLayer.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        gdv.DataSource = ds;
        gdv.DataBind();
    }

    public void GetBillsForApprovalMain(GridView gdv)
    {
        SIMSSqlDataAccessLayer objSIMSSqlDataAccessLayer = new SIMSSqlDataAccessLayer();
        SqlParameter[] param ={
                                new SqlParameter("@Type","GETBILLS_APPROVAL_DOCWISE")  ,
                               new SqlParameter("@RegionSno", this.RegionSno),
                               new SqlParameter("@BranchSno", this.BranchSno),
                                new SqlParameter("@Asc_Code", this.ASC_Id)
                              };
        DataSet ds = objSIMSSqlDataAccessLayer.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        gdv.DataSource = ds;
        gdv.DataBind();
    }

    public void GetUserRegions(DropDownList ddl)
    {
        SIMSSqlDataAccessLayer objSIMSSqlDataAccessLayer = new SIMSSqlDataAccessLayer();
        SqlParameter[] param ={
                                new SqlParameter("@Type","GETUSERREGION"),
                                new SqlParameter("@UserName",this.UserName)
                                
                             };
        DataSet ds = objSIMSSqlDataAccessLayer.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        ddl.DataTextField = "Region_Desc";
        ddl.DataValueField = "Region_SNo";
        ddl.DataSource = ds;
        ddl.DataBind();
   }

    public void GetUserBranchs(DropDownList ddl)
    {
        SIMSSqlDataAccessLayer objSIMSSqlDataAccessLayer = new SIMSSqlDataAccessLayer();
        SqlParameter[] param ={
                                new SqlParameter("@Type","GETUSER_BRANCHES"),
                                new SqlParameter("@RegionSno",Convert.ToInt16(this.RegionSno)),
                                new SqlParameter("@UserName",this.UserName)
                             };
        DataSet ds = objSIMSSqlDataAccessLayer.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        ddl.DataTextField = "Branch_Name";
        ddl.DataValueField = "Branch_SNo";
        ddl.DataSource = ds;
        ddl.DataBind();

    }

    public string ApprovalBills()
    {
        SqlParameter[] param ={
                                new SqlParameter("@MessageOut",SqlDbType.VarChar,200),
                                new SqlParameter("@Return_Value",SqlDbType.Int),
                                new SqlParameter("@Type","APPROVE_BILLS"),
                                new SqlParameter("@SpareId", this._SpareId),
                                new SqlParameter("@Amount",this.Amount),
                                new SqlParameter("@Document_No",this.AutoGeneratedNumber),
                                new SqlParameter("@IsApproved", this.IsApproved),
                                new SqlParameter("@RejectionReason", this.RejectionReason),
                                new SqlParameter("@EmpCode",Membership.GetUser().UserName.ToString())
                              };
        param[0].Direction = ParameterDirection.Output;
        param[1].Direction = ParameterDirection.ReturnValue;
        objSql.ExecuteNonQuery(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        if (int.Parse(param[1].Value.ToString()) == -1)
        {
            this.ReturnValue = int.Parse(param[1].Value.ToString());
        }
        strMsg = param[0].Value.ToString();
        param = null;
        return strMsg;
     
    }

    public string ApprovalBillsMain()
    {
        SqlParameter[] param ={
                                new SqlParameter("@MessageOut",SqlDbType.VarChar,200),
                                new SqlParameter("@Return_Value",SqlDbType.Int),
                                new SqlParameter("@Type","APPROVE_BILLS_DOCWISE"),
                                new SqlParameter("@Document_No",this.AutoGeneratedNumber),
                                new SqlParameter("@EmpCode",Membership.GetUser().UserName.ToString())
                              };
        param[0].Direction = ParameterDirection.Output;
        param[1].Direction = ParameterDirection.ReturnValue;
        objSql.ExecuteNonQuery(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        if (int.Parse(param[1].Value.ToString()) == -1)
        {
            this.ReturnValue = int.Parse(param[1].Value.ToString());
        }
        strMsg = param[0].Value.ToString();
        param = null;
        return strMsg;

    }

    /// <summary>
    /// Get Approved/Rejected Bills : for BA
    /// </summary>
    /// <param name="gdv"></param>
    public void GetBills(GridView gdv)
    {
        SIMSSqlDataAccessLayer objSIMSSqlDataAccessLayer = new SIMSSqlDataAccessLayer();
        SqlParameter[] param ={
                               new SqlParameter("@Type","GETBILLS_BA")  ,
                               new SqlParameter("@BranchSno", this.BranchSno),
                               new SqlParameter("@dateFrom", this.dateFrom),
                               new SqlParameter("@dateTo", this.dateTo),
                               new SqlParameter("@Asc_Code", this.ASC_Id)
                              
                              };
        DataSet ds = objSIMSSqlDataAccessLayer.ExecuteDataset(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        gdv.DataSource = ds;
        gdv.DataBind();
    }

    public string ResendBills()
    {
        SqlParameter[] param ={
                                new SqlParameter("@MessageOut",SqlDbType.VarChar,200),
                                new SqlParameter("@Return_Value",SqlDbType.Int),
                                new SqlParameter("@Type","BA_RESEND"),
                                new SqlParameter("@SpareId", this.SpareId),
                                new SqlParameter("@Bill_No",this.BillNo),
                                new SqlParameter("@Document_No",this.AutoGeneratedNumber),
                                new SqlParameter("@BAComments", this.BAComments),
                                new SqlParameter("@EmpCode",Membership.GetUser().UserName.ToString())
                              };
        param[0].Direction = ParameterDirection.Output;
        param[1].Direction = ParameterDirection.ReturnValue;
        objSql.ExecuteNonQuery(CommandType.StoredProcedure, "uspSparePurchaseOutside", param);
        if (int.Parse(param[1].Value.ToString()) == -1)
        {
            this.ReturnValue = int.Parse(param[1].Value.ToString());
        }
        strMsg = param[0].Value.ToString();
        param = null;
        return strMsg;
    }
}
