using System;
using System.Data;
using System.Web.Security;
using System.Web.UI.WebControls;
using System.Data.SqlClient;

/// <summary>
/// Description: This module is designed to make Entry for Save Sales Order Receipts.
/// Name: Mahesh Bhati
/// Date: 03-Feb-2010
/// /// </summary>
public class SalesOrderReceipts
{
    SIMSSqlDataAccessLayer objSql = new SIMSSqlDataAccessLayer();
    DataSet dsCommon = new DataSet();
    string strMsg="";
    SIMSCommonClass objCommonClass = new SIMSCommonClass();
	
    #region Properties and Variables

    public int Spare_Receipt_Id
    { get; set; }
    public string Transaction_No
    { get; set; }
    public string Transaction_Date
    { get; set; }
    public string SIMS_Indent_No
    { get; set; }
    public string PO_Number
    { get; set; }
    public string SAP_Sales_Order
    { get; set; }
    public string SAP_Invoice_No
    { get; set; }
    public string SAP_Invoice_Date
    { get; set; }
    public string SAP_Challan_No
    { get; set; }
    public string SAP_Challan_Date
    { get; set; }
    public string Is_Part_Delivery
    { get; set; }
    public string ASC_Id
    { get; set; }
    public string ProductDivision_Id
    { get; set; }
    public string Spare_Id
    { get; set; }
    public string Ordered_Qty
    { get; set; }
    public string Dispatched_Qty
    { get; set; }
    public string Received_Qty
    { get; set; }
    public string Pending_Qty
    { get; set; }
    public string Short_Qty
    { get; set; }
    public string Defective_Qty
    { get; set; }
    public string LnkBtnInvoice
    { get; set; }
    public string LnkBtnPONumber
    { get; set; }
    public string LnkBtnIndentNumber
    { get; set; }
    public string LnkBtnSalesorder
    { get; set; }
    public string ActionBy
    { get; set; }
    public string ActiveFlag
    { get; set; }
    public string ActionType
    { get; set; }
    public int ReturnValue
    { get; set; }
    public string MessageOut
    { get; set; }
    public string SearchCriteria
    { get; set; }
    public string SearchColumnName
    { get; set; }
    public string SortColumnName
    { get; set; }
    public string SortOrderBy
    { get; set; }
    public string Inter_SAP_Invoice_ID
    { get; set; }
    public string PrefixString
    { get; set; }
    public string AutoGeneratedNumber
    { get; set; }
    
    

    #endregion Properties and Variables

    #region Bind Grid
    public DataSet BindGridSalesOrder(GridView gvSearch, Label lblRowCount)
    {
               
        DataSet dstData = new DataSet();

        SqlParameter[] sqlParamSrh =
        {
            new SqlParameter("@Type","BIND_PENDING_GRID"),
            new SqlParameter("@Column_name",""),
            new SqlParameter("@SearchCriteria",""),
            new SqlParameter("@Active_Flag","1"),
            new SqlParameter("@ASC_Id",this.ASC_Id),
           
        };

        dstData = objCommonClass.BindDataGrid(gvSearch, "uspSalesOrderReceipts", true, sqlParamSrh, true);

        DataView dvSource = default(DataView);

        dvSource = dstData.Tables[0].DefaultView;
        //dvSource.Sort = strOrder;

       
        if ((dstData != null))
        {
            lblRowCount.Text = dstData.Tables[0].Rows.Count.ToString();
            gvSearch.DataSource = dvSource;
            gvSearch.DataBind();
        }
        //dstData = null;
        dvSource.Dispose();
        dvSource = null;
        return dstData;
        
    }

    public DataSet BindMultiplePONumber(GridView gvComm, Label lblRowCount, Label lblDivision)
    {

        DataSet dstData = new DataSet();

        SqlParameter[] sqlParamSrh =
        {
            new SqlParameter("@Type",this.ActionType),
             new SqlParameter("@PO_Number",this.PO_Number),
             new SqlParameter("@ASC_Id",this.ASC_Id),
           
        };

        dstData = objCommonClass.BindDataGrid(gvComm, "uspSalesOrderReceipts", true, sqlParamSrh, true);

        DataView dvSource = default(DataView);

        dvSource = dstData.Tables[0].DefaultView;
        //dvSource.Sort = strOrder;


        if ((dstData != null))
        {
            lblRowCount.Text = dstData.Tables[0].Rows.Count.ToString();
            gvComm.DataSource = dvSource;
            gvComm.DataBind();
            if (dstData.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dstData.Tables[0].Rows.Count; i++)
                {
                    if (strMsg != "")
                    {
                          strMsg = strMsg.TrimEnd(',');
                      
                            if (!strMsg.Contains(dstData.Tables[0].Rows[i]["Unit_Desc"].ToString()))
                            {
                                strMsg = strMsg + "," + (dstData.Tables[0].Rows[i]["Unit_Desc"].ToString()) + ",";
                            }                           
                       
                    }
                    else
                    {
                        strMsg = strMsg + (dstData.Tables[0].Rows[i]["Unit_Desc"].ToString()) + ",";
                    }
                    //if(!dstData.Tables[0].Rows.Contains(strMsg))
                    //{
                    //     strMsg = strMsg + (dstData.Tables[0].Rows[i]["Unit_Desc"].ToString()) + ",";
                    //}

                }
                strMsg = strMsg.TrimEnd(',');
                lblDivision.Text = strMsg;
            }
        }
        
        //dstData = null;
        dvSource.Dispose();
        dvSource = null;
        return dstData;

    }
    #endregion

    #region Functions For save data
    public void SaveData()
    {
        SqlParameter[] sqlParamI =
        {
            new SqlParameter("@MessageOut",SqlDbType.VarChar,200),
            new SqlParameter("@Return_Value",SqlDbType.Int),
            new SqlParameter("@Type",this.ActionType),
            new SqlParameter("@CreatedBy",this.ActionBy),
            new SqlParameter("@Active_Flag",1),
            new SqlParameter("@Transaction_No",this.AutoGeneratedNumber),
            new SqlParameter("@Transaction_Date",this.Transaction_Date),
            new SqlParameter("@SIMS_Indent_No",this.SIMS_Indent_No),
            new SqlParameter("@PO_Number",this.PO_Number),
            new SqlParameter("@SAP_Sales_Order",this.SAP_Sales_Order),
            new SqlParameter("@SAP_Invoice_No",this.SAP_Invoice_No),
            new SqlParameter("@SAP_Invoice_Date",this.SAP_Invoice_Date),
            new SqlParameter("@SAP_Challan_No",this.SAP_Challan_No),
            new SqlParameter("@SAP_Challan_Date",this.SAP_Challan_Date),
            new SqlParameter("@Is_Part_Delivery",this.Is_Part_Delivery),
            new SqlParameter("@ASC_Id",this.ASC_Id),
            new SqlParameter("@ProductDivision_Id",this.ProductDivision_Id),
            new SqlParameter("@Spare_Id",this.Spare_Id),
            new SqlParameter("@Ordered_Qty",this.Ordered_Qty),
            new SqlParameter("@Dispatched_Qty",this.Dispatched_Qty),
            new SqlParameter("@Received_Qty",this.Received_Qty),
            new SqlParameter("@Pending_Qty",this.Pending_Qty),
            new SqlParameter("@Short_Qty",this.Short_Qty),
            new SqlParameter("@Inter_SAP_Invoice_ID",Convert.ToInt32(this.Inter_SAP_Invoice_ID)),
            new SqlParameter("@Defective_Qty",this.Defective_Qty)
            
            
        };

        sqlParamI[0].Direction = ParameterDirection.Output;
        sqlParamI[1].Direction = ParameterDirection.ReturnValue;
        objSql.ExecuteNonQuery(CommandType.StoredProcedure, "uspSalesOrderReceipts", sqlParamI);
        this.ReturnValue = Convert.ToInt32(sqlParamI[1].Value.ToString());
        this.MessageOut = sqlParamI[0].Value.ToString();
        sqlParamI = null;
        
    }
    #endregion Functions For save data

    #region Get GET_UNIQUE_KEY_VALUE

    public string GET_UNIQUE_KEY_VALUE(string strASC_Code)
    {
        SqlParameter[] sqlParamG =
        {
            new SqlParameter("@Type","GET_UNIQUE_KEY_VALUE"),
            new SqlParameter("@COLUMNNAME","Transaction_No"),
            new SqlParameter("@ASC_Id",strASC_Code)
        };
        string strUNIQUEKEY = "";
        strUNIQUEKEY = Convert.ToString(objSql.ExecuteScalar(CommandType.StoredProcedure, "uspSalesOrderReceipts", sqlParamG));
        return strUNIQUEKEY;
    }
    public string GetAutoGeneratedNumber()
    {
        string AutoGeneratedNumber = string.Empty;
        SqlParameter[] param = {
                                    new SqlParameter("@Type", "GET_AUTOGENERATED_NUMBER"),
                                    new SqlParameter("@PrefixString", this.PrefixString)                                                                                                    
                               };

        AutoGeneratedNumber = Convert.ToString(objSql.ExecuteScalar(CommandType.StoredProcedure, "uspSpareSalePurchaseByASC", param));
        return AutoGeneratedNumber;
    }

    #endregion Get GET_UNIQUE_KEY_VALUE

    #region For Reading Values from database
    public void BindPONumber(DropDownList ddlPONumberSearch)
    {
        DataSet ds = new DataSet();
        SqlParameter sqlParam = new SqlParameter("@Type", "SELECT_PO_FILL");
        ds = objSql.ExecuteDataset(CommandType.StoredProcedure, "uspSalesOrderReceipts", sqlParam);
        ddlPONumberSearch.DataSource = ds;
        ddlPONumberSearch.DataTextField = "PO_Number";
        ddlPONumberSearch.DataValueField = "PO_Number";
        ddlPONumberSearch.DataBind();
        ddlPONumberSearch.Items.Insert(0, new ListItem("Select", "Select"));
        ds = null;
        sqlParam = null;
    }

    //public void SelectDivision(string strUserName)
    //{
    //    DataSet dsASC = new DataSet();
    //    SqlParameter[] sqlParamS = {
    //                                new SqlParameter("@EmpCode", strUserName),
    //                                new SqlParameter("@Type", "SELECT_ASC_NAME_CODE")
    //                               };
    //    dsASC = objSql.ExecuteDataset(CommandType.StoredProcedure, "uspSalesOrderReceipts", sqlParamS);
    //    if (dsASC.Tables[0].Rows.Count > 0)
    //    {
    //        ASC_Id = Convert.ToInt32(dsASC.Tables[0].Rows[0]["SC_SNo"]);
    //        ASC_Name = Convert.ToString(dsASC.Tables[0].Rows[0]["SC_Name"]);
    //    }
    //    dsASC = null;
    //    sqlParamS = null;

    //}
    #endregion For Reading Values from database

    #region Check Short Order
    public string GET_ShortOrderQuantity(string strPoNo, string strSIMSIndentNo, int intspareid)
    {
        string Check_Short_Quantity = "";
        SqlParameter[] sqlParamG =
        {
            new SqlParameter("@Type","CHECK_SHORT_QUANTITY"),
            new SqlParameter("@Po_Number",strPoNo),
            new SqlParameter("@Sims_indent_No",strSIMSIndentNo),
            new SqlParameter("@Spare_Id",intspareid)
        };
       
        Check_Short_Quantity = Convert.ToString(objSql.ExecuteScalar(CommandType.StoredProcedure, "uspSalesOrderReceipts", sqlParamG));
        return Check_Short_Quantity;
    }
    #endregion

    #region CheckOrder Quty

    //public void CheckOrderQty(string strSIMS_Indent_No, string strProductDivisionID, string strSpare_Id, string strPO_Number)
    public void CheckOrderQty()
    {
        SqlParameter[] param ={
                                new SqlParameter("@Type","CHECK_ORDER_RECEIVEV_QTY"),
                                new SqlParameter("@SIMS_Indent_No",this.SIMS_Indent_No),
                                new SqlParameter("@ProductDivision_Id",this.ProductDivision_Id),
                                new SqlParameter("@Spare_Id",this.Spare_Id),
                                new SqlParameter("@PO_Number",this.PO_Number),
                                new SqlParameter("@SAP_Sales_Order",this.SAP_Sales_Order),
                                new SqlParameter("@CreatedBy",Membership.GetUser().UserName.ToString())
                             };
       objSql.ExecuteScalar(CommandType.StoredProcedure, "uspSalesOrderReceipts", param);
       
    }
    #endregion

    #region cancel pending Orders 4 nov bhawesh added
    public void CancelPendingOrder(String RejectionReason)
    {
        SqlParameter[] param ={
                                new SqlParameter("@Type","CANCEL_PENDING_ORDER"),
                                new SqlParameter("@SIMS_Indent_No",this.SIMS_Indent_No),
                                new SqlParameter("@SAP_Sales_Order",this.SAP_Sales_Order),
                                new SqlParameter("@PO_Number",this.PO_Number),
                                new SqlParameter("@RejectionReason",RejectionReason),
                                new SqlParameter("@CreatedBy",Membership.GetUser().UserName.ToString())
                             };
        int suc = objSql.ExecuteNonQuery(CommandType.StoredProcedure, "uspSalesOrderReceipts", param);
    
    }


    #endregion

    public void InsertActivityLog()
    {
        SqlParameter[] param ={
                                new SqlParameter("@Type","INSERT_ACTIVITY_LOG"),
                                new SqlParameter("@PO_Number",this.PO_Number),
                                new SqlParameter("@CreatedBy",Membership.GetUser().UserName.ToString())
                             };
        objSql.ExecuteScalar(CommandType.StoredProcedure, "uspSalesOrderReceipts", param);

    }

    // 4 nov bhawesh added
    public void BindGridcancelledSalesOrder(GridView gvcancelled, Label lblcancount,String ColumnName,String SearchCriteria)
    {
        DataSet dstData = new DataSet();

        SqlParameter[] sqlParamSrh =
        {
            new SqlParameter("@Type",this.ActionType),
            new SqlParameter("@Column_name",ColumnName),
            new SqlParameter("@SearchCriteria",SearchCriteria),
            new SqlParameter("@Active_Flag","1"),
            new SqlParameter("@ASC_Id",this.ASC_Id),
           
        };

        dstData = objCommonClass.BindDataGrid(gvcancelled, "uspSalesOrderReceipts", true, sqlParamSrh, true);
        DataView dvSource = default(DataView);
        dvSource = dstData.Tables[0].DefaultView;
        if ((dstData != null))
        {
            lblcancount.Text = dstData.Tables[0].Rows.Count.ToString();
            gvcancelled.DataSource = dvSource;
            gvcancelled.DataBind();
        }
       
        dvSource.Dispose();
        dvSource = null;
        dstData = null;
      
    }
}
